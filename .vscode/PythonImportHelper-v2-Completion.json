[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "socket",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "AF_INET",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "SOCK_STREAM",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "SOL_SOCKET",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "SO_REUSEADDR",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "client_manager",
        "importPath": "client_manager",
        "description": "client_manager",
        "isExtraImport": true,
        "detail": "client_manager",
        "documentation": {}
    },
    {
        "label": "client_manager",
        "importPath": "client_manager",
        "description": "client_manager",
        "isExtraImport": true,
        "detail": "client_manager",
        "documentation": {}
    },
    {
        "label": "list_users",
        "importPath": "command_list",
        "description": "command_list",
        "isExtraImport": true,
        "detail": "command_list",
        "documentation": {}
    },
    {
        "label": "whisper",
        "importPath": "command_list",
        "description": "command_list",
        "isExtraImport": true,
        "detail": "command_list",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "command_manager",
        "importPath": "command_manager",
        "description": "command_manager",
        "isExtraImport": true,
        "detail": "command_manager",
        "documentation": {}
    },
    {
        "label": "connect_to_server",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def connect_to_server(host, port):\n    \"\"\"\n    Connects to the server and returns the client socket.\n    \"\"\"\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        client_socket.connect((host, port))\n    except Exception as e:\n        print(f\"Failed to connect to server: {e}\")\n        exit()",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "receive_messages",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def receive_messages(client_socket, nickname):\n    \"\"\"\n    Receives messages from the server and prints them.\n    \"\"\"\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if not message:\n                print(\"Server closed the connection.\")\n                client_socket.close()",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def send_message(client_socket):\n    while True:\n        try:\n            message = input()\n            if message == \"!quit\":\n                print(\"Closing connection...\")\n                client_socket.close()\n                break\n            else:\n                client_socket.send(message.encode('utf-8'))",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "client.client",
        "description": "client.client",
        "peekOfCode": "def main():\n    try:\n        HOST = input(\"Enter the server IP address: \") or \"localhost\"\n        PORT = int(input(\"Enter the server port: \") or 6969)\n        NICKNAME = input(\"Enter your nickname: \") or \"Anonymous\"\n        client_socket = connect_to_server(HOST, PORT)\n        receive_thread = threading.Thread(target=receive_messages, args=(client_socket, NICKNAME))\n        receive_thread.daemon = True\n        send_thread = threading.Thread(target=send_message, args=(client_socket,))\n        send_thread.daemon = True",
        "detail": "client.client",
        "documentation": {}
    },
    {
        "label": "ClientManager",
        "kind": 6,
        "importPath": "server.client_manager",
        "description": "server.client_manager",
        "peekOfCode": "class ClientManager:\n    def __init__(self):\n        self.client_list = {}\n        self.lock = threading.Lock()\n        logger.info(\"ClientManager initialized.\")\n    def add_client(self, username, client_socket):\n        with self.lock:\n            if username in self.client_list:\n                client_socket.send(\"Username already taken. Please reconnect with a different name.\".encode())\n                client_socket.close()",
        "detail": "server.client_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.client_manager",
        "description": "server.client_manager",
        "peekOfCode": "logger = setup_logging('client_manager')\nclass ClientManager:\n    def __init__(self):\n        self.client_list = {}\n        self.lock = threading.Lock()\n        logger.info(\"ClientManager initialized.\")\n    def add_client(self, username, client_socket):\n        with self.lock:\n            if username in self.client_list:\n                client_socket.send(\"Username already taken. Please reconnect with a different name.\".encode())",
        "detail": "server.client_manager",
        "documentation": {}
    },
    {
        "label": "client_manager",
        "kind": 5,
        "importPath": "server.client_manager",
        "description": "server.client_manager",
        "peekOfCode": "client_manager = ClientManager()",
        "detail": "server.client_manager",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "server.command_list",
        "description": "server.command_list",
        "peekOfCode": "def list_users(client, args=None):\n    \"\"\"\n    Lists all currently connected users.\n    \"\"\"\n    users = list(client_manager.client_list.keys())\n    client.send(f\"Currently online: {', '.join(users)}\".encode())\n    logger.info(f\"Command list_users executed by {client_manager.get_username(client)}\")\ndef whisper(client, args=None):\n    \"\"\"\n    Sends a private message to a specific user.",
        "detail": "server.command_list",
        "documentation": {}
    },
    {
        "label": "whisper",
        "kind": 2,
        "importPath": "server.command_list",
        "description": "server.command_list",
        "peekOfCode": "def whisper(client, args=None):\n    \"\"\"\n    Sends a private message to a specific user.\n    \"\"\"\n    if not args or len(args.split(\" \", 1)) < 2:\n        client.send(\"Usage: /whisper <username> <message>\".encode())\n        logger.warning(\"Whisper command used incorrectly\")\n        return\n    target_name, message = args.split(\" \", 1)\n    send_to = client_manager.get_client_socket(target_name)",
        "detail": "server.command_list",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.command_list",
        "description": "server.command_list",
        "peekOfCode": "logger = setup_logging('command_list')\ndef list_users(client, args=None):\n    \"\"\"\n    Lists all currently connected users.\n    \"\"\"\n    users = list(client_manager.client_list.keys())\n    client.send(f\"Currently online: {', '.join(users)}\".encode())\n    logger.info(f\"Command list_users executed by {client_manager.get_username(client)}\")\ndef whisper(client, args=None):\n    \"\"\"",
        "detail": "server.command_list",
        "documentation": {}
    },
    {
        "label": "CommandManager",
        "kind": 6,
        "importPath": "server.command_manager",
        "description": "server.command_manager",
        "peekOfCode": "class CommandManager:\n    def __init__(self):\n        self.commands = {}\n        self.lock = Lock()\n        self.register_static_commands()\n        logger.info(\"CommandManager initialized.\")\n    def register_command(self, name, func):\n        \"\"\"\n        Registers a command with the given name and function.\n        \"\"\"",
        "detail": "server.command_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.command_manager",
        "description": "server.command_manager",
        "peekOfCode": "logger = setup_logging('command_manager')\nclass CommandManager:\n    def __init__(self):\n        self.commands = {}\n        self.lock = Lock()\n        self.register_static_commands()\n        logger.info(\"CommandManager initialized.\")\n    def register_command(self, name, func):\n        \"\"\"\n        Registers a command with the given name and function.",
        "detail": "server.command_manager",
        "documentation": {}
    },
    {
        "label": "command_manager",
        "kind": 5,
        "importPath": "server.command_manager",
        "description": "server.command_manager",
        "peekOfCode": "command_manager = CommandManager()",
        "detail": "server.command_manager",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "server.logging_config",
        "description": "server.logging_config",
        "peekOfCode": "def setup_logging(name):\n    \"\"\"\n    Sets up logging for the given logger name.\n    \"\"\"\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.StreamHandler()\n    formatter = logging.Formatter(\"%(asctime)s | %(levelname)s | %(message)s\", \"%y-%m-%d %H:%M\")\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)",
        "detail": "server.logging_config",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "kind": 2,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "def broadcast(message, sender=None):\n    \"\"\"\n    Broadcasts a message to all connected clients except the sender.\n    \"\"\"\n    full_msg = f\"{sender}: {message}\" if sender else f\"[SERVER]: {message}\"\n    to_remove = []\n    for username, client_socket in client_manager.client_list.items():\n        try:\n            if username != sender:\n                client_socket.send(full_msg.encode())",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "handle_client",
        "kind": 2,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "def handle_client(client_socket, address):\n    \"\"\"\n    Handles communication with a connected client.\n    \"\"\"\n    logger.info(f\"Client connected from {address}\")\n    client_socket.send(\"!NICKNAME\".encode())\n    username = client_socket.recv(BUFFSIZE).decode().strip()\n    client_manager.add_client(username, client_socket)\n    broadcast(f\"{username} connected.\")\n    try:",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "logger = setup_logging('server')\n# Verify logging configuration\nlogger.info(\"Logging is configured correctly.\")\n# Load configuration\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\nHOST = config.get('server', 'host', fallback='localhost')\nPORT = config.getint('server', 'port', fallback=6969)\nBUFFSIZE = config.getint('server', 'buffsize', fallback=1024)\nlock = Lock()",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "config = configparser.ConfigParser()\nconfig.read('config.ini')\nHOST = config.get('server', 'host', fallback='localhost')\nPORT = config.getint('server', 'port', fallback=6969)\nBUFFSIZE = config.getint('server', 'buffsize', fallback=1024)\nlock = Lock()\ndef broadcast(message, sender=None):\n    \"\"\"\n    Broadcasts a message to all connected clients except the sender.\n    \"\"\"",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "HOST = config.get('server', 'host', fallback='localhost')\nPORT = config.getint('server', 'port', fallback=6969)\nBUFFSIZE = config.getint('server', 'buffsize', fallback=1024)\nlock = Lock()\ndef broadcast(message, sender=None):\n    \"\"\"\n    Broadcasts a message to all connected clients except the sender.\n    \"\"\"\n    full_msg = f\"{sender}: {message}\" if sender else f\"[SERVER]: {message}\"\n    to_remove = []",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "PORT = config.getint('server', 'port', fallback=6969)\nBUFFSIZE = config.getint('server', 'buffsize', fallback=1024)\nlock = Lock()\ndef broadcast(message, sender=None):\n    \"\"\"\n    Broadcasts a message to all connected clients except the sender.\n    \"\"\"\n    full_msg = f\"{sender}: {message}\" if sender else f\"[SERVER]: {message}\"\n    to_remove = []\n    for username, client_socket in client_manager.client_list.items():",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "BUFFSIZE",
        "kind": 5,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "BUFFSIZE = config.getint('server', 'buffsize', fallback=1024)\nlock = Lock()\ndef broadcast(message, sender=None):\n    \"\"\"\n    Broadcasts a message to all connected clients except the sender.\n    \"\"\"\n    full_msg = f\"{sender}: {message}\" if sender else f\"[SERVER]: {message}\"\n    to_remove = []\n    for username, client_socket in client_manager.client_list.items():\n        try:",
        "detail": "server.server",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "server.server",
        "description": "server.server",
        "peekOfCode": "lock = Lock()\ndef broadcast(message, sender=None):\n    \"\"\"\n    Broadcasts a message to all connected clients except the sender.\n    \"\"\"\n    full_msg = f\"{sender}: {message}\" if sender else f\"[SERVER]: {message}\"\n    to_remove = []\n    for username, client_socket in client_manager.client_list.items():\n        try:\n            if username != sender:",
        "detail": "server.server",
        "documentation": {}
    }
]